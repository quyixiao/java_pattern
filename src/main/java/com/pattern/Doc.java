package com.pattern;

public class Doc {
    // 简单的工厂模式（创建模式）：最简单的模式，有助于引出工厂方法模式
    // 工厂方法模式（创建模式）：工厂方法模式在后面的许多模式都有应用，它在模式的讨论里里屡见不鲜，了解工厂方法模式是了解所有的模式的起点
    // 策略模式（行为模式）：策略模式在本书中讨论里频繁出现，早些理解策略模式有助于理解其他的模式
    // 装饰模式（结构模式）：装饰模式将是读者第一次接触到模式的高雅之外，学会区别装饰模式和策略模式，也将是读者第一次学会区别看上去相似而
    // 而实质不同的模式
    // 在学习了装饰装饰模式之后，感兴趣的读者可以进一步阅读装饰模式在 Java I/O 中应用，作为补充内容
    // 合成模式（结构模式）：合成模式在所有的场合都有可能出现，合成模式经常与迭代子模式，责任链模式，解释器模式，访问者模式联合使用，
    // 因此，好好的掌握合成模式有助于理解后面的有前模式
    // 迭代子模式（行为模式）：学习迭代模式可以加深读者对合成模式的理解，本书还提供了关于 java 语言的迭代子模式的支持的专题分析，供
    // 感兴趣的读者理解
    // 模版方法模式（行为模式）：学习模版方法模式可以加深读者对我不知道怎么办模式以及简单工厂模式的，工厂方法的模式理解，在迭代子模式里
    // 模版方法模式经常被用到
    //
    // 本书还提供了关于 java servlet 构造中的设计模式，主要模版方法模式的专题研究
    // 抽象工厂模式（创建模式）：抽象工厂模式是创建模式里的第三个模式，读者回到这个模式，可以复习一下工厂方法模式
    // 在这一章后面的附录中，本书还给出了 java 语言 API 中所使用的抽象工厂模式，供感兴趣的读者阅读
    // 建造模式（创建模式）：读者可以比较一下建造模式与抽象工厂模式的异同
    // 单例模式（创建模式）：单例模式经常用来实现抽象工厂模式的，在单例模式中相关模式一节中，对这一点还是很详尽的描述
    // 本书为单例模式提供了一个专题研究章节，用来加深读者对这个重要模式的具体系统的设计中的意义的了解
    // 多例模式（创建模式）：多例模式对单例模式的推广，在学习了单例模式之后，学习多例模式，可以对隐藏在二者背后的设计思想有更加深入的了解
    // 代理模式（结构模式）：读者在这里有机会学习到代理模式是怎样的控制外界对一个对象的引用，代理模式也把读者引导到下一个模式-适配器模式


    // 本书利用了三章的篇幅，分别以代理模式的基本实现，智能引用代理和虚引用代理等具体的种类详细的讲解也代理模式是怎样实现和应用到具体的问题里面去


    // 桥梁模式（结构模式）：现在读者可以比较桥梁模式与适配器模式的异同。
    // 缺省适配模式（结构模式）：缺省适配器模式是适配器模式中的一种特例，在学习了普通的适配器模式之后，再学习缺省的适配器模式可以更加
    // 好的理解和体会两者之间的关系和区别


    // 调停者模式（行为模式）：学习调停者模式是怎样在观察者模式里发挥作用的，实现 MVC 这一经典的设计的
    // 观察者模式（行为模式）：读者可以在学习中发现调停者模式是怎样在观察者模式里发挥作用的，实现 MVC 这一经典的设计的
    // 读者如果使用过 java 语言的事件处理机制的话，实际上就已经使用过观察者模式，只是没有察觉而已，本书除了使用一章的篇幅讲解观察者模式本身之外，还使用了三章的
    // 篇幅讲解观察者模式在几个著名的 Java API 中的应用
    //MVC 模式（架构模式）：MVC 模式包含合成模式，策略模式，观察者模式等，可是这些设计械模式的联合运用，
    // 责任链模式（行为模式）：学习责任链模式，读者可以比较责任链模式和观察者模式，调停者模式是怎样处理调用的
    // 在最后的一章中，本书还提供了一个专题章节，介绍使用责任在 java 语言中里对击鼓传花游戏的模似的内容
    // 备忘录模式（行为模式）:读者学习备忘录务工，并讨论了此模式是怎样实现 undo和 redo 的，并比较下面要介绍命令模式处理方法。
    // 命令模式（行为模式）: 命令模式可以有很多使用方法，其中之一与备忘录模式有关，因此，在备忘录模式后面介绍
    // 书本还对 Swing 库中命令的撤销做介绍
    // 原始模式模式（创建模式）：这可能是创建模式中最复杂的一个，原始模型模式经常与命令模式一起使用，这就是为什么在命令模式后面介绍的
    // 原因
    // 作为补充阅读，本书还对 JavaBean 的串行化和并行化做介绍
    // 状态模式（行为模式）：读者可以通过学习状态来理解一个对象改变状态的另一种方式
    // 本书利用状态模式对（聊斋志异）中的崂山道士的故事做了和分析
    // 访问者模式（行为模式）：访问者模式经常与合成模式，迭代子模式一起联合使用
    // 本书在介绍访问者模式之前，对双重分派的概念做了介绍
    // 享元模式（结构模式）：这是所有常见模式中最复杂的一个模式，这一模式的应用在下面的解释器模式介绍
    // 解释器模式（行为模式）：这是一个复杂的模式，学习这一模式最好的学习离远模式以及访问者模式之后.
    // 门面模式（结构模式）：这是最后一个学习的模式，在学习了解释器模式之后，门面模式就比较好学了，因为讲解门面模式的环境常常与讲解解释器
    // 模式的环境一样的










}
