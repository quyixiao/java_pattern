package com.pattern;

public class Doc {
    // 简单的工厂模式（创建模式）：最简单的模式，有助于引出工厂方法模式
    // 工厂方法模式（创建模式）：工厂方法模式在后面的许多模式都有应用，它在模式的讨论里里屡见不鲜，了解工厂方法模式是了解所有的模式的起点
    // 策略模式（行为模式）：策略模式在本书中讨论里频繁出现，早些理解策略模式有助于理解其他的模式
    // 装饰模式（结构模式）：装饰模式将是读者第一次接触到模式的高雅之外，学会区别装饰模式和策略模式，也将是读者第一次学会区别看上去相似而
    // 而实质不同的模式
    // 在学习了装饰装饰模式之后，感兴趣的读者可以进一步阅读装饰模式在 Java I/O 中应用，作为补充内容
    // 合成模式（结构模式）：合成模式在所有的场合都有可能出现，合成模式经常与迭代子模式，责任链模式，解释器模式，访问者模式联合使用，
    // 因此，好好的掌握合成模式有助于理解后面的有前模式
    // 迭代子模式（行为模式）：学习迭代模式可以加深读者对合成模式的理解，本书还提供了关于 java 语言的迭代子模式的支持的专题分析，供
    // 感兴趣的读者理解
    // 模版方法模式（行为模式）：学习模版方法模式可以加深读者对我不知道怎么办模式以及简单工厂模式的，工厂方法的模式理解，在迭代子模式里
    // 模版方法模式经常被用到
    //
    // 本书还提供了关于 java servlet 构造中的设计模式，主要模版方法模式的专题研究
    // 抽象工厂模式（创建模式）：抽象工厂模式是创建模式里的第三个模式，读者回到这个模式，可以复习一下工厂方法模式
    // 在这一章后面的附录中，本书还给出了 java 语言 API 中所使用的抽象工厂模式，供感兴趣的读者阅读
    // 建造模式（创建模式）：读者可以比较一下建造模式与抽象工厂模式的异同
    // 单例模式（创建模式）：单例模式经常用来实现抽象工厂模式的，在单例模式中相关模式一节中，对这一点还是很详尽的描述
    // 本书为单例模式提供了一个专题研究章节，用来加深读者对这个重要模式的具体系统的设计中的意义的了解
    // 多例模式（创建模式）：多例模式对单例模式的推广，在学习了单例模式之后，学习多例模式，可以对隐藏在二者背后的设计思想有更加深入的了解
    // 代理模式（结构模式）：读者在这里有机会学习到代理模式是怎样的控制外界对一个对象的引用，代理模式也把读者引导到下一个模式-适配器模式
    // 
}
